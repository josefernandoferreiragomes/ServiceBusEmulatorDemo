name: microsoft-azure-servicebus-emulator-full
services:

  emulator:
    container_name: "servicebus-emulator"
    image: mcr.microsoft.com/azure-messaging/servicebus-emulator:latest
    pull_policy: always
    volumes:
      - "${CONFIG_PATH}:/ServiceBus_Emulator/ConfigFiles/Config.json"
    ports:
      - "5672:5672"
      - "5300:5300"
    environment:
      SQL_SERVER: mssql
      MSSQL_SA_PASSWORD: "${MSSQL_SA_PASSWORD}"  # Password should be same as what is set for SQL Server Linux 
      ACCEPT_EULA: ${ACCEPT_EULA}
      SQL_WAIT_INTERVAL: ${SQL_WAIT_INTERVAL} # Optional: Time in seconds to wait for SQL to be ready (default is 15 seconds)
    depends_on:
      - mssql
    networks:
      sb-emulator:
        aliases:
          - "sb-emulator"

  mssql:
    container_name: "mssql"
    image: "mcr.microsoft.com/mssql/server:2022-latest"
    networks:
      sb-emulator:
        aliases:
          - "mssql"
    environment:
      ACCEPT_EULA: ${ACCEPT_EULA}
      MSSQL_SA_PASSWORD: "${MSSQL_SA_PASSWORD}" # To be filled by user as per policy : https://learn.microsoft.com/en-us/sql/relational-databases/security/strong-passwords?view=sql-server-linux-ver16 
    ports:
      - "1433:1433"

  publisher:
    container_name: "publisher-demo"
    build:
      context: .
      dockerfile: PublisherDemo/Dockerfile
    environment:
      SERVICEBUS_CONNECTION_STRING: "${SB_CONNECTION_STRING}"
      RUNNING_IN_CONTAINER: "true"
    networks:
      - sb-emulator
    depends_on:
      - emulator

  diagnostic:
    container_name: "diagnostic-tool"
    build:
      context: .
      dockerfile: DiagnosticTool/Dockerfile
    environment:
      SERVICEBUS_CONNECTION_STRING: "${SB_CONNECTION_STRING}"
      RUNNING_IN_CONTAINER: "true"
    networks:
      - sb-emulator
    depends_on:
      - emulator
      - publisher

  subscriber:
    container_name: "subscriber-demo"
    build:
      context: .
      dockerfile: SubscriberDemo/Dockerfile
    environment:
      SERVICEBUS_CONNECTION_STRING: "${SB_CONNECTION_STRING}"
      RUNNING_IN_CONTAINER: "true"
    networks:
      - sb-emulator
    depends_on:
      - emulator
      - publisher
  
  message-reset:
    container_name: "message-reset"
    build:
      context: .
      dockerfile: MessageResetDemo/Dockerfile
    environment:
      SERVICEBUS_CONNECTION_STRING: "${SB_CONNECTION_STRING}"
      RUNNING_IN_CONTAINER: "true"
    networks:
      - sb-emulator
    depends_on:
      - emulator
      - publisher

  function-order-publisher:
    container_name: "function-order-publisher"
    build:
      context: .
      dockerfile: OrderPublisher/Dockerfile
    ports:
      - "5025:80"
      - "5026:8081"
      - '7071:7071'
    environment:
      SERVICEBUS_CONNECTION_STRING: "${SB_CONNECTION_STRING}"
      FUNCTION_KEY: "${FUNCTION_KEY}"
    networks:
      - sb-emulator
    depends_on:
      - emulator
  
  function-order-subscriber:
    container_name: "function-order-subscriber"
    build:
      context: .
      dockerfile: OrderSubscriberTopic.1/Dockerfile    
    environment:
      SERVICEBUS_CONNECTION_STRING: "${SB_CONNECTION_STRING}"
    networks:
      - sb-emulator
    depends_on:
      - emulator

  function-queue-subscriber:
    container_name: "function-queue-subscriber"
    build:
      context: .
      dockerfile: OrderSubscriberQueue.1/Dockerfile       
    environment:
      SERVICEBUS_CONNECTION_STRING: "${SB_CONNECTION_STRING}"
    networks:
      - sb-emulator
    depends_on:
      - emulator

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml:ro
    networks:
      - sb-emulator
    depends_on:
      - emulator

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - sb-emulator
    depends_on:
      - prometheus

  order-processor-backend:
    container_name: "order-processor-backend"
    build:
      context: .
      dockerfile: OrderProcessorDemoBackendApi/Dockerfile   
    networks:
      - sb-emulator
    depends_on:
      - function-order-subscriber

volumes:
  grafana-data:

networks:
  sb-emulator: